# -*- coding: utf-8 -*-
import numpy
from scipy.optimize import minimize
import time
import math

import illuminant
from common import common
import led_opt

solve_factor = 0.0
LED_COUNT = common.LED_COUNT

def _func2(x, *a):
    target = numpy.array(a[0])
    base = numpy.array(a[1])
    Ps = a[2]
    l = numpy.array(a[3])
    p = numpy.array(x)
    e2 = 0.0
    cal = numpy.empty(71) #[0.0 for i in range(71)]
    sigmaCal = 0.0
    e2_2 = 0.0
    factor = a[4]
    N = 71
    Yv = 1.0
    a=0.0
    b=0.0
    v=sum(illuminant.color_matching_function_Y)
    for i in range(N):
        a = a + illuminant.color_matching_function_Y[i] / v * l[i]
        b = b + l[i] / float(N)
    Yv = a / b
    # if factor == 1.0:
    #     for i in range(71):
    #         sigmaCal = 0.0
    #         for j in range(LED_COUNT):
    #             sigmaCal = sigmaCal + p[j] * base[i][j]

    #         e2 = e2 + pow(target[i] - (sigmaCal)/(l[i]/Ps), 2)

    #     e2 = e2 / N

    #     return e2
    
    for i in range(71):
        sigmaCal = 0.0
        for j in range(LED_COUNT):
            sigmaCal = sigmaCal + p[j] * base[i][j]

        e2 = e2 + pow((target[i] - (sigmaCal)/(l[i]/Ps))/Yv, 2)

        cal[i] = sigmaCal
    
    e2 = e2 / N

    XYZ0 = illuminant.spectrum2XYZ(l / Ps)
    XYZ1 = illuminant.spectrum2XYZ(target * l / Ps)
    XYZ2 = illuminant.spectrum2XYZ(cal)
    
    lab1 = illuminant.XYZ2LAB(XYZ1, XYZ0)
    lab2 = illuminant.XYZ2LAB(XYZ2, XYZ0)
    de00 = illuminant.delta_e_cie2000(lab1, lab2)
    
    return factor * e2 + (1.0 - factor) * de00 * 0.001

def _cons1(x):
    return x

def _cons2(x):
    return 1.0 - x

# def optimize_lightsouce_refrectance2(lightsource, refrectance, outputLevel, led):
#     ref = refrectance

#     res = optimize2(lightsource, outputLevel, led)
    
#     if res == None:
#         return None
    
#     Ps = res["result"]["ps"]

#     # Ps = Ps * outputLevel / 100.0
#     a = numpy.empty((71, LED_COUNT))#[[0 for i in range(18)] for j in range(71)]
#     a2 = numpy.empty((71, LED_COUNT))#[[0 for i in range(18)] for j in range(71)]

#     for i in range(71):
#         for j in range(LED_COUNT):
#             a[i][j] = led[j][i]
#             a2[i][j] = led[j][i]/(lightsource[i]/Ps)
#     #lsq
#     a = numpy.array(a)
#     b = numpy.array(ref)
#     a2 = numpy.array(a2)

#     Q,R = numpy.linalg.qr(a2)
#     t = numpy.dot(Q.T, b)
#     p = numpy.linalg.solve(R, t)
  
#     # Ps = max(p)

#     #minimizer SLSQP method
#     cons = (
#         # {'type': 'ineq', 'fun': lambda x: x}
#         {'type': 'ineq', 'fun': _cons1},
#         {'type': 'ineq', 'fun': _cons2},
#     )
#     bounds = ((0.0, 1.0), (0.0, 1.0),(0.0, 1.0),(0.0, 1.0),(0.0, 1.0),(0.0, 1.0),(0.0, 1.0),(0.0, 1.0),(0.0, 1.0),(0.0, 1.0),(0.0, 1.0),(0.0, 1.0),(0.0, 1.0),(0.0, 1.0),(0.0, 1.0),(0.0, 1.0),(0.0, 1.0),(0.0, 1.0))

#     res = minimize(_func2, x0=p, constraints=cons, bounds=None, args=(ref, a, Ps, lightsource), method='SLSQP')

#     if res.success == False:
#         return None
    
#     p = res.x

#     # for i in range(18):
#     #     p[i] = p[i] * outputLevel / 100.0
#     p = p * outputLevel / 100.0
    
#     resIntensity = numpy.zeros(71)#[0 for i in range(71)]

#     for i in range(71):
#         for j in range(LED_COUNT):
#             resIntensity[i] += p[j] * led[j][i]

#     resluminance = 0
#     for i in range(71):
#         resluminance += resIntensity[i] * illuminant.color_matching_function_Y[i]
#     resluminance = resluminance * 5 * 683

#     resXYZ = illuminant.spectrum2XYZ(resIntensity)
#     resxyY = illuminant.XYZ2lxy(resXYZ[0],resXYZ[1],resXYZ[2])
#     resCT = illuminant.cct(resxyY[1], resxyY[2])

#     refIntensity = [0 for i in range(71)]
#     for i in range(71):
#         refIntensity[i] = lightsource[i] / Ps *  ref[i] * outputLevel / 100.0

#     refluminance = illuminant.Luminance(refIntensity)
#     refXYZ = illuminant.spectrum2XYZ(refIntensity)
#     refxyY = illuminant.XYZ2lxy(refXYZ[0],refXYZ[1],refXYZ[2])
#     refCT = illuminant.cct(refxyY[1],refxyY[2])
    
#     p2 = [0 for i in range(LED_COUNT)]
#     for i in range(LED_COUNT):
#         p2[i] = float(p[i])

#     l = [0 for i in range(71)]
#     for i in range(71):
#         l[i] = lightsource[i] / Ps

#     res = [0.0]*71
#     for i in range(71):
#         res[i] = resIntensity[i] / l[i]
    
#     a1 = numpy.array(ref)
#     a2 = numpy.array(res)
    
#     sr2 = illuminant.SR2(a1, a2)
#     a3 = numpy.array(refIntensity)
#     a4 = numpy.array(resIntensity)
#     sr2l = illuminant.SR2L(a3, a4)
#     # sr2 = illuminant.SR2(refIntensity, resIntensity)
#     # sr2l = illuminant.SR2L(refIntensity, resIntensity)

#     XYZ0 = illuminant.spectrum2XYZ(l)
#     XYZ1 = refXYZ
#     XYZ2 = resXYZ
    
#     lab1 = illuminant.XYZ2LAB(XYZ1, XYZ0)
#     lab2 = illuminant.XYZ2LAB(XYZ2, XYZ0)
#     de00 = illuminant.delta_e_cie2000(lab1, lab2)[0]

#     return {"result":{"sr2":sr2, "sr2l":sr2l, "de00":de00,"p":p2,"ps":Ps},"light":{"intensity":l, "outputLevel":outputLevel},"out":{"intensity":list(resIntensity), "p":p2, "luminance":resluminance, "XYZ":resXYZ, "lxy": resxyY, "lab":lab1, "ct": resCT},"ref":{"intensity":list(refIntensity),"luminance":refluminance, "XYZ":refXYZ, "lxy":refxyY, "lab":lab2,"ct":refCT}}

def optimize_lightsouce_refrectance(lightsource, refrectance, brightness, led, factor = 1.0):
    ref = refrectance

    res = led_opt.optimize(lightsource, brightness, led)

    if res == None:
        return None
    
    Ps = 1.0#res["result"]["ps"]
    li = res["ref"]["intensity"]

    a = numpy.empty((71,LED_COUNT))
    a2 = numpy.empty((71,LED_COUNT))

    for i in range(71):
        for j in range(LED_COUNT):
            a[i][j] = led[j][i]
            a2[i][j] = led[j][i]/(li[i]/Ps)
    #LSQ
    a = numpy.array(a)
    b = numpy.array(ref)
    a2 = numpy.array(a2)

    Q,R = numpy.linalg.qr(a2)
    t = numpy.dot(Q.T, b)
    p = numpy.linalg.solve(R, t)
    
    #minimizer SLSQP method
    cons = (
        {'type': 'ineq', 'fun': _cons1},
        {'type': 'ineq', 'fun': _cons2},
    )
    

    res = minimize(_func2, x0=p, constraints=cons, bounds=None, args=(ref, a, Ps, li, factor), method='SLSQP')

    if res.success == False:
        return None
    
    p = res.x

    # for i in range(18):
    #     p[i] = p[i] * outputLevel / 100.0
    # p = p * outputLevel / 100.0
    
    resIntensity = numpy.zeros(71)

    for i in range(71):
        for j in range(LED_COUNT):
            resIntensity[i] += p[j] * led[j][i]

    resluminance = 0
    for i in range(71):
        resluminance += resIntensity[i] * illuminant.color_matching_function_Y[i]
    resluminance = resluminance * 5 * 683

    resXYZ = illuminant.spectrum2XYZ(resIntensity)
    resxyY = illuminant.XYZ2lxy(resXYZ[0],resXYZ[1],resXYZ[2])
    resCT = illuminant.cct(resXYZ[0], resXYZ[1], resXYZ[2])

    refIntensity = [0 for i in range(71)]
    for i in range(71):
        refIntensity[i] = li[i] / Ps * ref[i]

    refluminance = illuminant.Luminance(refIntensity)
    refXYZ = illuminant.spectrum2XYZ(refIntensity)
    refxyY = illuminant.XYZ2lxy(refXYZ[0],refXYZ[1],refXYZ[2])
    refCT = illuminant.cct(refXYZ[0], refXYZ[1], refXYZ[2])
    
    p2 = [0 for i in range(LED_COUNT)]
    for i in range(LED_COUNT):
        p2[i] = float(p[i])

    l = [0 for i in range(71)]
    for i in range(71):
        l[i] = li[i]
    
    res = [0.0]*71
    for i in range(71):
        res[i] = resIntensity[i] / l[i]

    a1 = numpy.array(ref)
    a2 = numpy.array(res)
    
    sr2 = illuminant.SR2(a1, a2, li)
    a1 = numpy.array(refIntensity)
    a2 = numpy.array(resIntensity)
    sr2l = illuminant.SR2L(a1, a2)

    XYZ0 = illuminant.spectrum2XYZ(l)
    XYZ1 = refXYZ
    XYZ2 = resXYZ
    
    lab1 = illuminant.XYZ2LAB(XYZ1, XYZ0)
    lab2 = illuminant.XYZ2LAB(XYZ2, XYZ0)
    de00 = illuminant.delta_e_cie2000(lab1, lab2)[0]

    return {"result":{"sr2":sr2, "sr2l":sr2l, "de00":de00,"p":p2,"ps":Ps},"light":{"intensity":l},"out":{"intensity":list(resIntensity), "p":p2, "luminance":resluminance, "XYZ":resXYZ, "lxy": resxyY, "lab":lab1, "ct": resCT},"ref":{"intensity":list(refIntensity),"luminance":refluminance, "XYZ":refXYZ, "lxy":refxyY, "lab":lab2,"ct":refCT}}

illuminat_ref = {
    "D65" : [49.98,52.31,54.65,68.7,82.75,87.12,91.49,92.46,93.43,90.06,86.68,95.77,104.86,110.94,117.01,117.41,117.81,116.34,114.86,115.39,115.92,112.37,108.81,109.08,109.35,108.58,107.8,106.3,104.79,106.24,107.69,106.05,104.41,104.23,104.05,102.02,100,98.17,96.33,96.06,95.79,92.24,88.69,89.35,90.01,89.8,89.6,88.65,87.7,85.49,83.29,83.49,83.7,81.86,80.03,80.12,80.21,81.25,82.28,80.28,78.28,74,69.72,70.67,71.61,72.98,74.35,67.98,61.6,65.74,69.89],
    "D55" : [32.58,35.34,38.09,49.52,60.95,64.75,68.55,70.07,71.58,69.75,67.91,76.76,85.61,91.8,97.99,99.23,100.46,100.19,99.91,101.33,102.74,100.41,98.08,99.38,100.68,100.69,100.7,100.34,99.99,102.1,104.21,103.16,102.1,102.53,102.97,101.48,100,98.61,97.22,97.48,97.75,94.59,91.43,92.93,94.42,94.78,95.14,94.68,94.22,92.33,90.45,91.39,92.33,90.59,88.85,89.59,90.32,92.13,93.95,91.95,89.96,84.82,79.68,81.26,82.84,83.84,84.84,77.54,70.24,74.77,79.3],
    "D50" : [24.49,27.18,29.87,39.59,49.31,52.91,56.51,58.27,60.03,58.93,57.82,66.32,74.82,81.04,87.25,88.93,90.61,90.99,91.37,93.24,95.11,93.54,91.96,93.84,95.72,96.17,96.61,96.87,97.13,99.61,102.1,101.43,100.75,101.54,102.32,101.16,100,98.87,97.74,98.33,98.92,96.21,93.5,95.59,97.69,98.48,99.27,99.16,99.04,97.38,95.72,97.29,98.86,97.26,95.67,96.93,98.19,100.6,103,101.07,99.13,93.26,87.38,89.49,91.6,92.25,92.89,84.87,76.85,81.68,86.51],
    "A" : [9.8,10.9,12.09,13.35,14.71,16.15,17.68,19.29,20.99,22.79,24.67,26.64,28.7,30.85,33.09,35.41,37.81,40.3,42.87,45.52,48.24,51.04,53.91,56.85,59.86,62.93,66.06,69.25,72.5,75.79,79.13,82.52,85.95,89.41,92.91,96.44,100,103.58,107.18,110.8,114.44,118.08,121.73,125.39,129.04,132.7,136.35,139.99,143.62,147.24,150.84,154.42,157.98,161.52,165.03,168.51,171.96,175.38,178.77,182.12,185.43,188.7,191.93,195.12,198.26,201.36,204.41,207.41,210.36,213.27,216.12],
    "E" : [1.0] * 71,
    "F1":[1.87,2.36,2.94,3.47,5.17,19.49,6.13,6.24,7.01,7.79,8.56,43.67,16.94,10.72,11.35,11.89,12.37,12.75,13,13.15,13.23,13.17,13.13,12.85,12.52,12.2,11.83,11.5,11.22,11.05,11.03,11.18,11.53,27.74,17.05,13.55,14.33,15.01,15.52,18.29,19.55,15.48,14.91,14.15,13.22,12.19,11.12,10.03,8.95,7.96,7.02,6.2,5.42,4.73,4.15,3.64,3.2,2.81,2.47,2.18,1.93,1.72,1.67,1.43,1.29,1.19,1.08,0.96,0.88,0.81,0.77],
    "F2":[1.18,1.48,1.84,2.15,3.44,15.69,3.85,3.74,4.19,4.62,5.06,34.98,11.81,6.27,6.63,6.93,7.19,7.4,7.54,7.62,7.65,7.62,7.62,7.45,7.28,7.15,7.05,7.04,7.16,7.47,8.04,8.88,10.01,24.88,16.64,14.59,16.16,17.56,18.62,21.47,22.79,19.29,18.66,17.73,16.54,15.21,13.8,12.36,10.95,9.65,8.4,7.32,6.31,5.43,4.68,4.02,3.45,2.96,2.55,2.19,1.89,1.64,1.53,1.27,1.1,0.99,0.88,0.76,0.68,0.61,0.56],
    "F3":[0.82,1.02,1.26,1.44,2.57,14.36,2.7,2.45,2.73,3,3.28,31.85,9.47,4.02,4.25,4.44,4.59,4.72,4.8,4.86,4.87,4.85,4.88,4.77,4.67,4.62,4.62,4.73,4.99,5.48,6.25,7.34,8.78,23.82,16.14,14.59,16.63,18.49,19.95,23.11,24.69,21.41,20.85,19.93,18.67,17.22,15.65,14.04,12.45,10.95,9.51,8.27,7.11,6.09,5.22,4.45,3.8,3.23,2.75,2.33,1.99,1.7,1.55,1.27,1.09,0.96,0.83,0.71,0.62,0.54,0.49],
    "F4":[0.57,0.7,0.87,0.98,2.01,13.75,1.95,1.59,1.76,1.93,2.1,30.28,8.03,2.55,2.7,2.82,2.91,2.99,3.04,3.08,3.09,3.09,3.14,3.06,3,2.98,3.01,3.14,3.41,3.9,4.69,5.81,7.32,22.59,15.11,13.88,16.33,18.68,20.64,24.28,26.26,23.28,22.94,22.14,20.91,19.43,17.74,16,14.42,12.56,10.93,9.52,8.18,7.01,6,5.11,4.36,3.69,3.13,2.64,2.24,1.91,1.7,1.39,1.18,1.03,0.88,0.74,0.64,0.54,0.49],
    "F5":[1.87,2.35,2.92,3.45,5.1,18.91,6,6.11,6.85,7.58,8.31,40.76,16.06,10.32,10.91,11.4,11.83,12.17,12.4,12.54,12.58,12.52,12.47,12.2,11.89,11.61,11.33,11.1,10.96,10.97,11.16,11.54,12.12,27.78,17.73,14.47,15.2,15.77,16.1,18.54,19.5,15.39,14.64,13.72,12.69,11.57,10.45,9.35,8.29,7.32,6.41,5.63,4.9,4.26,3.72,3.25,2.83,2.49,2.19,1.93,1.71,1.52,1.43,1.26,1.13,1.05,0.96,0.85,0.78,0.72,0.68],
    "F6":[1.05,1.31,1.63,1.9,3.11,14.8,3.43,3.3,3.68,4.07,4.45,32.61,10.74,5.48,5.78,6.03,6.25,6.41,6.52,6.58,6.59,6.56,6.56,6.42,6.28,6.2,6.19,6.3,6.6,7.12,7.94,9.07,10.49,25.22,17.46,15.63,17.22,18.53,19.43,21.97,23.01,19.41,18.56,17.42,16.09,14.64,13.15,11.68,10.25,8.96,7.74,6.69,5.71,4.87,4.16,3.55,3.02,2.57,2.2,1.87,1.6,1.37,1.29,1.05,0.91,0.81,0.71,0.61,0.54,0.48,0.44],
    "F7":[2.56,3.18,3.84,4.53,6.15,19.37,7.37,7.05,7.71,8.41,9.15,44.14,17.52,11.35,12,12.58,13.08,13.45,13.71,13.88,13.95,13.93,13.82,13.64,13.43,13.25,13.08,12.93,12.78,12.6,12.44,12.33,12.26,29.52,17.05,12.44,12.58,12.72,12.83,15.46,16.75,12.83,12.67,12.45,12.19,11.89,11.6,11.35,11.12,10.95,10.76,10.42,10.11,10.04,10.02,10.11,9.87,8.65,7.27,6.44,5.83,5.41,5.04,4.57,4.12,3.77,3.46,3.08,2.73,2.47,2.25],
    "F8":[1.21,1.5,1.81,2.13,3.17,13.08,3.83,3.45,3.86,4.42,5.09,34.1,12.42,7.68,8.6,9.46,10.24,10.84,11.33,11.71,11.98,12.17,12.28,12.32,12.35,12.44,12.55,12.68,12.77,12.72,12.6,12.43,12.22,28.96,16.51,11.79,11.76,11.77,11.84,14.61,16.11,12.34,12.53,12.72,12.92,13.12,13.34,13.61,13.87,14.07,14.2,14.16,14.13,14.34,14.5,14.46,14,12.58,10.99,9.98,9.22,8.62,8.07,7.39,6.71,6.16,5.63,5.03,4.46,4.02,3.66],
    "F9":[0.9,1.12,1.36,1.6,2.59,12.8,3.05,2.56,2.86,3.3,3.82,32.62,10.77,5.84,6.57,7.25,7.86,8.35,8.75,9.06,9.31,9.48,9.61,9.68,9.74,9.88,10.04,10.26,10.48,10.63,10.76,10.96,11.18,27.71,16.29,12.28,12.74,13.21,13.65,16.57,18.14,14.55,14.65,14.66,14.61,14.5,14.39,14.4,14.47,14.62,14.72,14.55,14.4,14.58,14.88,15.51,15.47,13.2,10.57,9.18,8.25,7.57,7.03,6.35,5.72,5.25,4.8,4.29,3.8,3.43,3.12],
    "F10":[1.11,0.63,0.62,0.57,1.48,12.16,2.12,2.7,3.74,5.14,6.75,34.39,14.86,10.4,10.76,10.67,10.11,9.27,8.29,7.29,7.91,16.64,16.73,10.44,5.94,3.34,2.35,1.88,1.59,1.47,1.8,5.71,40.98,73.69,33.61,8.24,3.38,2.47,2.14,4.86,11.45,14.79,12.16,8.97,6.52,8.81,44.12,34.55,12.09,12.15,10.52,4.43,1.95,2.19,3.19,2.77,2.29,2,1.52,1.35,1.47,1.79,1.74,1.02,1.14,3.32,4.49,2.05,0.49,0.24,0.21],
    "F11":[0.91,0.63,0.46,0.37,1.29,12.68,1.59,1.79,2.46,3.33,4.49,33.94,12.13,6.95,7.19,7.12,6.72,6.13,5.46,4.79,5.66,14.29,14.96,8.97,4.72,2.33,1.47,1.1,0.89,0.83,1.18,4.9,39.59,72.84,32.61,7.52,2.83,1.96,1.67,4.43,11.28,14.76,12.73,9.74,7.33,9.72,55.27,42.58,13.18,13.16,12.26,5.11,2.07,2.34,3.58,3.01,2.48,2.14,1.54,1.33,1.46,1.94,2,1.2,1.35,4.1,5.58,2.51,0.57,0.27,0.23],
    "F12":[0.96,0.64,0.45,0.33,1.19,12.48,1.12,0.94,1.08,1.37,1.78,29.05,7.9,2.65,2.71,2.65,2.49,2.33,2.1,1.91,3.01,10.83,11.88,6.88,3.43,1.49,0.92,0.71,0.6,0.63,1.1,4.56,34.4,65.4,29.48,7.16,3.08,2.47,2.27,5.09,11.96,15.32,14.27,11.86,9.28,12.31,68.53,53.02,14.67,14.38,14.71,6.46,2.57,2.75,4.18,3.44,2.81,2.42,1.64,1.36,1.49,2.14,2.34,1.42,1.61,5.04,6.98,3.19,0.71,0.3,0.26]
}

macbeth_ref = {
    "dark skin":[0.066,0.069,0.071,0.074,0.075,0.075,0.076,0.076,0.075,0.075,0.076,0.076,0.076,0.076,0.076,0.076,0.076,0.076,0.076,0.076,0.077,0.077,0.077,0.078,0.079,0.082,0.086,0.09,0.094,0.096,0.097,0.098,0.099,0.099,0.101,0.104,0.108,0.114,0.12,0.129,0.137,0.145,0.151,0.155,0.157,0.159,0.159,0.161,0.164,0.17,0.177,0.184,0.193,0.199,0.206,0.211,0.216,0.217,0.216,0.211,0.205,0.199,0.195,0.194,0.196,0.199,0.205,0.211,0.219,0.227,0.237],
    "light skin":[0.107,0.117,0.133,0.155,0.168,0.175,0.179,0.182,0.184,0.187,0.19,0.195,0.199,0.204,0.212,0.221,0.232,0.247,0.263,0.28,0.297,0.313,0.326,0.338,0.346,0.351,0.351,0.337,0.317,0.294,0.273,0.262,0.26,0.266,0.27,0.271,0.269,0.268,0.275,0.296,0.331,0.373,0.414,0.455,0.485,0.509,0.526,0.541,0.55,0.564,0.572,0.582,0.592,0.599,0.615,0.626,0.637,0.652,0.665,0.681,0.696,0.715,0.73,0.745,0.765,0.778,0.79,0.802,0.812,0.822,0.828],
    "blue sky":[0.108,0.129,0.162,0.21,0.258,0.295,0.32,0.327,0.327,0.332,0.331,0.332,0.332,0.33,0.326,0.322,0.317,0.309,0.304,0.299,0.295,0.292,0.284,0.277,0.267,0.259,0.254,0.246,0.237,0.227,0.216,0.206,0.2,0.196,0.193,0.188,0.183,0.175,0.167,0.158,0.152,0.147,0.145,0.145,0.146,0.148,0.15,0.152,0.153,0.156,0.156,0.157,0.158,0.159,0.163,0.165,0.17,0.172,0.172,0.171,0.167,0.165,0.161,0.156,0.151,0.146,0.144,0.145,0.148,0.156,0.165],
    "foliage":[0.059,0.062,0.063,0.065,0.066,0.066,0.066,0.066,0.067,0.067,0.067,0.067,0.068,0.068,0.069,0.07,0.07,0.071,0.071,0.072,0.073,0.073,0.075,0.077,0.081,0.09,0.107,0.132,0.161,0.183,0.195,0.197,0.192,0.184,0.172,0.161,0.15,0.139,0.132,0.126,0.123,0.121,0.119,0.117,0.114,0.113,0.111,0.111,0.113,0.115,0.118,0.123,0.126,0.129,0.133,0.134,0.137,0.136,0.135,0.131,0.128,0.124,0.121,0.12,0.121,0.121,0.123,0.126,0.128,0.131,0.135],
    "blue flower":[0.119,0.143,0.183,0.249,0.318,0.379,0.42,0.434,0.441,0.444,0.443,0.442,0.438,0.434,0.43,0.421,0.413,0.404,0.392,0.382,0.369,0.355,0.338,0.322,0.305,0.295,0.286,0.276,0.266,0.254,0.243,0.234,0.229,0.226,0.224,0.222,0.217,0.211,0.206,0.202,0.202,0.202,0.205,0.212,0.219,0.228,0.236,0.243,0.249,0.258,0.268,0.282,0.297,0.312,0.329,0.343,0.355,0.361,0.362,0.357,0.349,0.339,0.334,0.329,0.332,0.336,0.344,0.351,0.364,0.374,0.388],
    "bluish green":[0.12,0.14,0.171,0.217,0.26,0.292,0.312,0.321,0.332,0.339,0.347,0.359,0.368,0.379,0.395,0.412,0.435,0.464,0.49,0.515,0.538,0.558,0.575,0.586,0.594,0.598,0.598,0.593,0.586,0.577,0.567,0.554,0.542,0.521,0.504,0.481,0.463,0.439,0.415,0.393,0.368,0.34,0.315,0.289,0.266,0.251,0.238,0.23,0.223,0.22,0.218,0.215,0.212,0.208,0.209,0.207,0.21,0.213,0.22,0.228,0.235,0.241,0.247,0.252,0.258,0.259,0.258,0.254,0.249,0.247,0.247],
    "orange":[0.067,0.065,0.065,0.068,0.067,0.068,0.069,0.068,0.068,0.068,0.069,0.07,0.07,0.07,0.071,0.071,0.071,0.072,0.073,0.073,0.074,0.075,0.077,0.079,0.084,0.091,0.105,0.126,0.148,0.167,0.18,0.189,0.196,0.204,0.215,0.234,0.262,0.3,0.346,0.403,0.461,0.516,0.562,0.596,0.617,0.625,0.629,0.631,0.628,0.632,0.632,0.631,0.629,0.623,0.625,0.626,0.633,0.637,0.647,0.656,0.664,0.674,0.685,0.689,0.698,0.7,0.701,0.7,0.694,0.693,0.694],
    "purplish blue":[0.113,0.136,0.167,0.216,0.258,0.292,0.317,0.339,0.361,0.379,0.396,0.414,0.429,0.439,0.443,0.439,0.431,0.417,0.399,0.377,0.348,0.318,0.286,0.258,0.232,0.21,0.19,0.171,0.155,0.141,0.131,0.124,0.119,0.114,0.11,0.106,0.102,0.1,0.098,0.097,0.098,0.098,0.099,0.1,0.101,0.101,0.1,0.1,0.1,0.102,0.103,0.107,0.112,0.118,0.126,0.134,0.144,0.155,0.17,0.186,0.205,0.226,0.251,0.278,0.311,0.345,0.38,0.417,0.458,0.491,0.525],
    "moderate red":[0.098,0.11,0.124,0.141,0.149,0.152,0.153,0.15,0.149,0.147,0.146,0.145,0.144,0.143,0.141,0.14,0.138,0.136,0.134,0.131,0.128,0.125,0.122,0.12,0.117,0.116,0.113,0.11,0.107,0.106,0.105,0.105,0.105,0.105,0.106,0.108,0.109,0.112,0.118,0.135,0.17,0.224,0.292,0.367,0.435,0.494,0.538,0.568,0.586,0.604,0.61,0.614,0.619,0.616,0.618,0.619,0.622,0.618,0.617,0.616,0.619,0.617,0.617,0.615,0.619,0.616,0.617,0.619,0.618,0.62,0.622],
    "purple":[0.096,0.112,0.132,0.159,0.179,0.191,0.198,0.201,0.201,0.197,0.191,0.183,0.174,0.165,0.155,0.145,0.135,0.126,0.117,0.11,0.103,0.096,0.089,0.083,0.078,0.075,0.073,0.071,0.069,0.066,0.064,0.062,0.061,0.061,0.062,0.063,0.064,0.064,0.063,0.061,0.061,0.061,0.061,0.064,0.069,0.078,0.089,0.102,0.117,0.132,0.147,0.16,0.174,0.187,0.202,0.218,0.236,0.255,0.278,0.303,0.331,0.359,0.392,0.429,0.466,0.498,0.533,0.565,0.594,0.623,0.644],
    "yellow green":[0.07,0.069,0.072,0.074,0.074,0.074,0.075,0.076,0.076,0.077,0.079,0.081,0.082,0.086,0.089,0.094,0.103,0.113,0.127,0.146,0.168,0.196,0.228,0.267,0.31,0.366,0.42,0.47,0.509,0.535,0.551,0.559,0.563,0.564,0.559,0.553,0.546,0.536,0.523,0.508,0.493,0.475,0.451,0.426,0.404,0.384,0.371,0.36,0.351,0.35,0.346,0.346,0.344,0.339,0.339,0.34,0.343,0.351,0.361,0.37,0.381,0.389,0.399,0.407,0.412,0.414,0.416,0.414,0.412,0.411,0.416],
    "orange yellow":[0.071,0.07,0.073,0.077,0.077,0.078,0.079,0.078,0.078,0.079,0.08,0.08,0.08,0.081,0.082,0.082,0.083,0.084,0.084,0.085,0.086,0.087,0.09,0.092,0.098,0.11,0.133,0.17,0.22,0.278,0.334,0.382,0.416,0.441,0.46,0.475,0.492,0.509,0.528,0.55,0.573,0.591,0.608,0.624,0.633,0.64,0.647,0.652,0.655,0.66,0.66,0.663,0.667,0.665,0.669,0.67,0.674,0.67,0.677,0.678,0.678,0.681,0.682,0.683,0.689,0.688,0.692,0.694,0.697,0.699,0.7],
    "blue":[0.116,0.141,0.172,0.209,0.241,0.267,0.29,0.304,0.314,0.322,0.331,0.336,0.341,0.343,0.341,0.33,0.317,0.298,0.279,0.26,0.239,0.218,0.196,0.175,0.156,0.14,0.127,0.115,0.103,0.091,0.08,0.072,0.065,0.06,0.055,0.052,0.049,0.046,0.044,0.043,0.043,0.043,0.043,0.043,0.044,0.044,0.045,0.046,0.047,0.049,0.052,0.056,0.061,0.065,0.071,0.076,0.081,0.084,0.086,0.084,0.08,0.078,0.076,0.076,0.079,0.084,0.09,0.097,0.105,0.115,0.126],
    "green":[0.067,0.066,0.067,0.068,0.069,0.07,0.07,0.071,0.071,0.072,0.073,0.075,0.077,0.08,0.083,0.088,0.095,0.104,0.115,0.13,0.148,0.17,0.193,0.221,0.253,0.291,0.323,0.349,0.366,0.373,0.372,0.368,0.359,0.346,0.33,0.315,0.298,0.279,0.263,0.243,0.223,0.202,0.18,0.162,0.147,0.136,0.129,0.123,0.12,0.118,0.117,0.116,0.115,0.112,0.112,0.111,0.113,0.115,0.119,0.123,0.128,0.132,0.136,0.141,0.144,0.146,0.146,0.143,0.141,0.139,0.139],
    "red":[0.063,0.062,0.063,0.063,0.063,0.062,0.062,0.063,0.062,0.063,0.063,0.063,0.062,0.063,0.063,0.063,0.063,0.063,0.062,0.062,0.061,0.061,0.061,0.061,0.062,0.064,0.067,0.068,0.07,0.07,0.071,0.071,0.071,0.07,0.07,0.07,0.071,0.074,0.079,0.086,0.095,0.112,0.14,0.183,0.241,0.311,0.386,0.459,0.517,0.564,0.597,0.618,0.633,0.637,0.647,0.648,0.652,0.652,0.654,0.652,0.654,0.658,0.659,0.658,0.665,0.664,0.665,0.667,0.67,0.672,0.672],
    "yellow":[0.071,0.069,0.069,0.069,0.07,0.071,0.07,0.07,0.071,0.071,0.072,0.073,0.074,0.075,0.077,0.08,0.084,0.089,0.096,0.105,0.117,0.134,0.158,0.19,0.235,0.295,0.365,0.442,0.509,0.562,0.599,0.626,0.649,0.667,0.68,0.692,0.704,0.714,0.722,0.73,0.741,0.746,0.747,0.755,0.756,0.762,0.766,0.769,0.772,0.779,0.783,0.791,0.793,0.796,0.8,0.8,0.801,0.801,0.803,0.801,0.804,0.809,0.81,0.814,0.817,0.82,0.823,0.826,0.83,0.831,0.831],
    "magenta":[0.124,0.146,0.184,0.243,0.304,0.349,0.374,0.383,0.384,0.382,0.373,0.366,0.352,0.339,0.326,0.31,0.297,0.285,0.268,0.255,0.239,0.222,0.208,0.195,0.186,0.178,0.17,0.158,0.144,0.131,0.121,0.115,0.114,0.117,0.12,0.121,0.121,0.12,0.124,0.136,0.157,0.187,0.225,0.269,0.318,0.372,0.435,0.498,0.559,0.617,0.667,0.703,0.735,0.754,0.775,0.781,0.794,0.794,0.803,0.804,0.808,0.809,0.814,0.814,0.82,0.823,0.826,0.829,0.83,0.834,0.834],
    "cyan" :[0.1,0.117,0.141,0.178,0.212,0.24,0.26,0.27,0.277,0.291,0.301,0.316,0.336,0.354,0.37,0.384,0.404,0.426,0.442,0.455,0.459,0.46,0.458,0.449,0.437,0.421,0.402,0.377,0.353,0.325,0.299,0.274,0.25,0.225,0.202,0.181,0.162,0.146,0.134,0.124,0.117,0.111,0.106,0.102,0.097,0.094,0.091,0.09,0.089,0.089,0.089,0.089,0.088,0.088,0.089,0.09,0.091,0.093,0.093,0.093,0.093,0.092,0.09,0.089,0.088,0.086,0.087,0.087,0.089,0.092,0.095],
    "white":[0.143,0.171,0.215,0.3,0.41,0.538,0.675,0.781,0.837,0.871,0.888,0.892,0.901,0.9,0.902,0.905,0.908,0.91,0.909,0.91,0.91,0.909,0.911,0.908,0.909,0.91,0.914,0.907,0.905,0.903,0.901,0.903,0.911,0.912,0.913,0.914,0.916,0.914,0.912,0.914,0.917,0.913,0.91,0.912,0.907,0.909,0.909,0.907,0.907,0.914,0.915,0.915,0.918,0.912,0.916,0.915,0.918,0.91,0.911,0.909,0.909,0.909,0.91,0.913,0.915,0.916,0.916,0.916,0.918,0.917,0.919],
    "neutral 8":[0.143,0.172,0.215,0.288,0.38,0.476,0.55,0.589,0.601,0.609,0.613,0.616,0.619,0.619,0.619,0.619,0.618,0.619,0.615,0.614,0.613,0.612,0.61,0.612,0.611,0.615,0.615,0.613,0.614,0.614,0.615,0.616,0.618,0.617,0.617,0.618,0.619,0.617,0.619,0.62,0.621,0.618,0.617,0.618,0.614,0.613,0.611,0.61,0.607,0.61,0.607,0.608,0.605,0.602,0.604,0.6,0.599,0.596,0.595,0.594,0.591,0.591,0.585,0.584,0.585,0.586,0.584,0.583,0.582,0.583,0.581],
    "neutral 6.5" :[0.13,0.152,0.189,0.243,0.299,0.34,0.363,0.372,0.376,0.377,0.38,0.382,0.386,0.388,0.388,0.388,0.388,0.388,0.383,0.384,0.383,0.381,0.38,0.381,0.382,0.383,0.385,0.384,0.384,0.386,0.385,0.387,0.387,0.386,0.386,0.387,0.388,0.387,0.388,0.39,0.389,0.388,0.386,0.386,0.386,0.384,0.383,0.381,0.378,0.38,0.377,0.376,0.374,0.373,0.371,0.369,0.369,0.366,0.365,0.362,0.364,0.359,0.357,0.357,0.357,0.354,0.353,0.354,0.355,0.353,0.353],
    "neutral 5" :[0.116,0.129,0.147,0.169,0.184,0.193,0.199,0.201,0.203,0.204,0.207,0.209,0.212,0.214,0.215,0.214,0.214,0.214,0.213,0.213,0.212,0.211,0.211,0.211,0.212,0.213,0.214,0.214,0.214,0.215,0.214,0.215,0.216,0.216,0.215,0.216,0.216,0.217,0.217,0.218,0.219,0.22,0.219,0.219,0.218,0.218,0.217,0.216,0.214,0.213,0.213,0.212,0.212,0.21,0.209,0.207,0.207,0.206,0.206,0.204,0.203,0.203,0.202,0.2,0.2,0.198,0.198,0.198,0.197,0.197,0.197],
    "neutral 3.5" :[0.081,0.087,0.091,0.098,0.102,0.104,0.106,0.106,0.106,0.107,0.108,0.109,0.11,0.11,0.111,0.11,0.11,0.11,0.109,0.109,0.109,0.108,0.108,0.108,0.108,0.109,0.109,0.11,0.109,0.109,0.11,0.11,0.11,0.11,0.109,0.109,0.11,0.11,0.11,0.11,0.11,0.109,0.109,0.108,0.108,0.108,0.107,0.107,0.106,0.106,0.106,0.105,0.105,0.104,0.104,0.103,0.102,0.102,0.101,0.101,0.101,0.1,0.1,0.099,0.099,0.099,0.099,0.098,0.098,0.098,0.098],
    "black" :[0.044,0.045,0.044,0.045,0.045,0.045,0.045,0.045,0.045,0.045,0.045,0.045,0.044,0.044,0.044,0.044,0.044,0.044,0.044,0.044,0.044,0.043,0.043,0.043,0.043,0.044,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.042,0.043,0.043,0.042,0.043,0.042,0.042,0.042,0.042,0.042,0.042,0.042,0.042,0.042,0.042,0.042,0.042,0.042,0.043,0.043,0.043]
}

def test():
    import sys
    import os
    import led
    led.configure()
    D65 = [49.98,52.31,54.65,68.7,82.75,87.12,91.49,92.46,93.43,90.06,86.68,95.77,104.86,110.94,117.01,117.41,117.81,116.34,114.86,115.39,115.92,112.37,108.81,109.08,109.35,108.58,107.8,106.3,104.79,106.24,107.69,106.05,104.41,104.23,104.05,102.02,100,98.17,96.33,96.06,95.79,92.24,88.69,89.35,90.01,89.8,89.6,88.65,87.7,85.49,83.29,83.49,83.7,81.86,80.03,80.12,80.21,81.25,82.28,80.28,78.28,74,69.72,70.67,71.61,72.98,74.35,67.98,61.6,65.74,69.89]
    D55 = [32.58,35.34,38.09,49.52,60.95,64.75,68.55,70.07,71.58,69.75,67.91,76.76,85.61,91.8,97.99,99.23,100.46,100.19,99.91,101.33,102.74,100.41,98.08,99.38,100.68,100.69,100.7,100.34,99.99,102.1,104.21,103.16,102.1,102.53,102.97,101.48,100,98.61,97.22,97.48,97.75,94.59,91.43,92.93,94.42,94.78,95.14,94.68,94.22,92.33,90.45,91.39,92.33,90.59,88.85,89.59,90.32,92.13,93.95,91.95,89.96,84.82,79.68,81.26,82.84,83.84,84.84,77.54,70.24,74.77,79.3]
    D50 = [24.49,27.18,29.87,39.59,49.31,52.91,56.51,58.27,60.03,58.93,57.82,66.32,74.82,81.04,87.25,88.93,90.61,90.99,91.37,93.24,95.11,93.54,91.96,93.84,95.72,96.17,96.61,96.87,97.13,99.61,102.1,101.43,100.75,101.54,102.32,101.16,100,98.87,97.74,98.33,98.92,96.21,93.5,95.59,97.69,98.48,99.27,99.16,99.04,97.38,95.72,97.29,98.86,97.26,95.67,96.93,98.19,100.6,103,101.07,99.13,93.26,87.38,89.49,91.6,92.25,92.89,84.87,76.85,81.68,86.51]
    A = [9.8,10.9,12.09,13.35,14.71,16.15,17.68,19.29,20.99,22.79,24.67,26.64,28.7,30.85,33.09,35.41,37.81,40.3,42.87,45.52,48.24,51.04,53.91,56.85,59.86,62.93,66.06,69.25,72.5,75.79,79.13,82.52,85.95,89.41,92.91,96.44,100,103.58,107.18,110.8,114.44,118.08,121.73,125.39,129.04,132.7,136.35,139.99,143.62,147.24,150.84,154.42,157.98,161.52,165.03,168.51,171.96,175.38,178.77,182.12,185.43,188.7,191.93,195.12,198.26,201.36,204.41,207.41,210.36,213.27,216.12]
    E = [1.0] * 71

    white = [0.143,0.171,0.215,0.3,0.41,0.538,0.675,0.781,0.837,0.871,0.888,0.892,0.901,0.9,0.902,0.905,0.908,0.91,0.909,0.91,0.91,0.909,0.911,0.908,0.909,0.91,0.914,0.907,0.905,0.903,0.901,0.903,0.911,0.912,0.913,0.914,0.916,0.914,0.912,0.914,0.917,0.913,0.91,0.912,0.907,0.909,0.909,0.907,0.907,0.914,0.915,0.915,0.918,0.912,0.916,0.915,0.918,0.91,0.911,0.909,0.909,0.909,0.91,0.913,0.915,0.916,0.916,0.916,0.918,0.917,0.919]
    blue = [0.116,0.141,0.172,0.209,0.241,0.267,0.29,0.304,0.314,0.322,0.331,0.336,0.341,0.343,0.341,0.33,0.317,0.298,0.279,0.26,0.239,0.218,0.196,0.175,0.156,0.14,0.127,0.115,0.103,0.091,0.08,0.072,0.065,0.06,0.055,0.052,0.049,0.046,0.044,0.043,0.043,0.043,0.043,0.043,0.044,0.044,0.045,0.046,0.047,0.049,0.052,0.056,0.061,0.065,0.071,0.076,0.081,0.084,0.086,0.084,0.08,0.078,0.076,0.076,0.079,0.084,0.09,0.097,0.105,0.115,0.126]
    green = [0.067,0.066,0.067,0.068,0.069,0.07,0.07,0.071,0.071,0.072,0.073,0.075,0.077,0.08,0.083,0.088,0.095,0.104,0.115,0.13,0.148,0.17,0.193,0.221,0.253,0.291,0.323,0.349,0.366,0.373,0.372,0.368,0.359,0.346,0.33,0.315,0.298,0.279,0.263,0.243,0.223,0.202,0.18,0.162,0.147,0.136,0.129,0.123,0.12,0.118,0.117,0.116,0.115,0.112,0.112,0.111,0.113,0.115,0.119,0.123,0.128,0.132,0.136,0.141,0.144,0.146,0.146,0.143,0.141,0.139,0.139]
    red = [0.063,0.062,0.063,0.063,0.063,0.062,0.062,0.063,0.062,0.063,0.063,0.063,0.062,0.063,0.063,0.063,0.063,0.063,0.062,0.062,0.061,0.061,0.061,0.061,0.062,0.064,0.067,0.068,0.07,0.07,0.071,0.071,0.071,0.07,0.07,0.07,0.071,0.074,0.079,0.086,0.095,0.112,0.14,0.183,0.241,0.311,0.386,0.459,0.517,0.564,0.597,0.618,0.633,0.637,0.647,0.648,0.652,0.652,0.654,0.652,0.654,0.658,0.659,0.658,0.665,0.664,0.665,0.667,0.67,0.672,0.672]
    black = [0.044,0.045,0.044,0.045,0.045,0.045,0.045,0.045,0.045,0.045,0.045,0.045,0.044,0.044,0.044,0.044,0.044,0.044,0.044,0.044,0.044,0.043,0.043,0.043,0.043,0.044,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.042,0.043,0.043,0.042,0.043,0.042,0.042,0.042,0.042,0.042,0.042,0.042,0.042,0.042,0.042,0.042,0.042,0.042,0.043,0.043,0.043]
    standardreflector = [1.0]*71

    start = time.clock()
    # res = optimizeRelative(D65, 120, led.LED)
    # res = optimize(D65, 300, led.LED)
    # res = optimize_ct(5000, 100, led.LED)
    res = optimize_lightsouce_refrectance(D55,white,100,led.LED)
    # res = optimize_lightsouce_refrectance2(D65,standardreflector,100,led.LED)
    # res = optimize(illuminat_ref["F7"], 100, led.LED)

    if res == None:
        print "error."
        exit(0)

    intensity = res["out"]["intensity"]
    p = res["out"]["p"]
    XYZ = res["out"]["XYZ"]
    xy = res["out"]["lxy"]
    cct = res["out"]["ct"]
    luminance = res["out"]["luminance"]

    refIntensity = res["ref"]["intensity"]
    XYZ2 = res["ref"]["XYZ"]
    xy2 = res["ref"]["lxy"]
    cct2 = res["ref"]["ct"]
    luminance2 = res["ref"]["luminance"]

    sr2l=0.0
    sr2l=res["result"]["sr2l"]

    debug = True
    if debug:
        if os.path.exists('res') == False:
            os.mkdir('res')

        f = open('res/solver.res.txt', 'w')
        for i in range(71):
            f.write(str(intensity[i])+"\n")

        f.close()

        f = open('res/solver.ref.txt', 'w')
        for i in range(71):
            f.write(str(refIntensity[i])+"\n")

        f.close()

        f = open('res/solver.p.txt', 'w')
        for i in range(LED_COUNT):
            f.write(str(p[i])+"\n")

        f.close()

    print "factor"
    print p
    # for i in range(18):
    #     print "p%d = %f" % (i+1, p[i])

    X = XYZ[0]
    Y = XYZ[1]
    Z = XYZ[2]
    x = xy[1]
    y = xy[2]

    print "calclation ."
    print "XYZ = %f, %f, %f" % (X, Y, Z)
    print "xy = %f, %f" % (x, y)
    print "luminance : %f cd/m2" % luminance
    print "T : %f K" % cct

    X2 = XYZ2[0]
    Y2 = XYZ2[1]
    Z2 = XYZ2[2]
    x2 = xy2[1]
    y2 = xy2[2]

    print "reference ."
    print "XYZ = %f, %f, %f" % (X2, Y2, Z2)
    print "xy = %f, %f" % (x2, y2)
    print "luminance : %f cd/m2" % luminance2
    print "T : %f K" % cct2

    print ""
    print "sr2l = %f" % (sr2l)
    if "light" in res:
        lab = res["out"]["lab"]
        lab2 = res["ref"]["lab"]
        sr2 = res["result"]["sr2"]
        sr2l = res["result"]["sr2l"]
        delta_e = res["result"]["de00"]
        print ""
        print "lab1 = %f,%f,%f" % (lab[0],lab[1],lab[2])
        print "lab2 = %f,%f,%f" % (lab2[0],lab2[1],lab2[2])
        print "delta e (CIE2000) = %f" % delta_e
        print "SR2 = %f" % sr2
        print "SR2L = %f" % sr2l

    print "process time : %f" % (time.clock() - start)


def colorcheckTest():
    import led
    led.configure("low")
    print "color check test start."
    colorchecker_list = ["dark skin","light skin","blue sky","foliage","blue flower","bluish green","orange","purplish blue","moderate red","purple","yellow green","orange yellow","blue","green","red","yellow","magenta","cyan","white","neutral 8","neutral 6.5","neutral 5","neutral 3.5","black"]
    f = open("colorcheck.test.txt", "w")
    for i in range(24):
        res = optimize_lightsouce_refrectance(illuminat_ref["D55"], macbeth_ref[colorchecker_list[i]], 150, led.LED, 0.90)

        if res == None:
            continue

        de00 = res["result"]["de00"]
        sr2 = res["result"]["sr2"]
        lab1 = res["ref"]["lab"]
        lab2 = res["out"]["lab"]

        f.write(colorchecker_list[i] + "\t" + str(de00) + "\t" + str(sr2) + "\t" + str(lab1) + "\t" + str(lab2) + "\n")
        print "color check [" + colorchecker_list[i] + "]."
        print "de00 = " + str(de00) + ", sr2 = " + str(sr2) + ", lab1 = " + str(lab1) + ", lab2 = " + str(lab2)

    f.close()

    print "color check test end."

if __name__ == '__main__':
    
    # test()
    colorcheckTest()

